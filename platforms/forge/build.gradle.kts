import net.minecraftforge.gradle.common.util.RunConfig
import net.minecraftforge.gradle.userdev.tasks.RenameJarInPlace

plugins {
    id("platform-conventions")
    id("net.minecraftforge.gradle")
    id("org.spongepowered.mixin")
}

val mcVersion = "1.17.1"
val forgeVersion = "37.0.103"

// Include resources generated by data generators.
sourceSets {
    main {
        resources.srcDir("src/generated/resources")
    }
}

repositories {
    maven("https://maven.enginehub.org/repo/")
}

minecraft {
    mappings("official", mcVersion)
    accessTransformers.setFrom(file("src/main/resources/META-INF/accesstransformer.cfg"))

    runs {
        val runAction = Action<RunConfig> {
            workingDirectory(layout.projectDirectory.dir("run").asFile)
            property("forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP")
            property("forge.logging.console.level", "debug")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "$projectDir/build/createSrgToMcp/output.srg")
            arg("-mixin.config=otg.mixins.json")

            mods {
                register("otg") {
                    source(sourceSets.main.get())
                }
            }
        }
        for (run in listOf("client", "server", "data")) {
            register(run, runAction)
        }
        named("data") {
            args("--mod", "otg", "--all", "--output", file("src/generated/resources/"))
        }
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:$mcVersion-$forgeVersion")

    annotationProcessor("org.spongepowered:mixin:0.8.4:processor")

    implementation(project(":common:common-core"))

    compileOnly("com.sk89q.worldedit:worldedit-core:7.2.7") {
        exclude("org.yaml")
    }

    // We may not need this, remove if so
    compileOnly(fg.deobf("com.sk89q.worldedit:worldedit-forge-mc1.17.1:7.2.7"))
}

tasks {
    processResources {
        val replacements = mapOf("version" to project.version)
        inputs.properties(replacements)

        filesMatching("META-INF/mods.toml") {
            expand(replacements)
        }
    }

    jar {
        manifest {
            attributes("MixinConfigs" to "otg.mixins.json")
        }
    }
}

afterEvaluate {
    tasks {
        val reobfJar = named<RenameJarInPlace>("reobfJar") {
            input.set(shadowJar.flatMap { it.archiveFile })
        }
        shadowJar {
            finalizedBy(reobfJar)
        }
        if (providers.systemProperty("idea.sync.active").forUseAtConfigurationTime().getOrElse("false") == "true") {
            withType<JavaCompile> {
                options.annotationProcessorPath = files()
            }
        }
    }
}

otgPlatform {
    productionJar.set(tasks.shadowJar.flatMap { it.archiveFile })
}

publishing {
    repositories {
        // Not sure what this is for, copied from forge MDK
        maven("file://${project.projectDir}/mcmodsrepo")
    }
}

mixin {
    add(sourceSets.main.get(), "org.refmap.json")
}
